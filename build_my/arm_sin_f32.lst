ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccTHCPjI.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"arm_sin_f32.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_sin_f32,"ax",%progbits
  18              		.align	1
  19              		.global	arm_sin_f32
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	arm_sin_f32:
  27              	.LVL0:
  28              	.LFB135:
  29              		.file 1 "Src/arm_sin_f32.c"
   1:Src/arm_sin_f32.c **** /* ----------------------------------------------------------------------
   2:Src/arm_sin_f32.c ****  * Project:      CMSIS DSP Library
   3:Src/arm_sin_f32.c ****  * Title:        arm_sin_f32.c
   4:Src/arm_sin_f32.c ****  * Description:  Fast sine calculation for floating-point values
   5:Src/arm_sin_f32.c ****  *
   6:Src/arm_sin_f32.c ****  * $Date:        27. January 2017
   7:Src/arm_sin_f32.c ****  * $Revision:    V.1.5.1
   8:Src/arm_sin_f32.c ****  *
   9:Src/arm_sin_f32.c ****  * Target Processor: Cortex-M cores
  10:Src/arm_sin_f32.c ****  * -------------------------------------------------------------------- */
  11:Src/arm_sin_f32.c **** /*
  12:Src/arm_sin_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Src/arm_sin_f32.c ****  *
  14:Src/arm_sin_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Src/arm_sin_f32.c ****  *
  16:Src/arm_sin_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Src/arm_sin_f32.c ****  * not use this file except in compliance with the License.
  18:Src/arm_sin_f32.c ****  * You may obtain a copy of the License at
  19:Src/arm_sin_f32.c ****  *
  20:Src/arm_sin_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Src/arm_sin_f32.c ****  *
  22:Src/arm_sin_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Src/arm_sin_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Src/arm_sin_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Src/arm_sin_f32.c ****  * See the License for the specific language governing permissions and
  26:Src/arm_sin_f32.c ****  * limitations under the License.
  27:Src/arm_sin_f32.c ****  */
  28:Src/arm_sin_f32.c **** 
  29:Src/arm_sin_f32.c **** #include "arm_math.h"
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccTHCPjI.s 			page 2


  30:Src/arm_sin_f32.c **** #include "arm_common_tables.h"
  31:Src/arm_sin_f32.c **** #include <math.h>
  32:Src/arm_sin_f32.c **** 
  33:Src/arm_sin_f32.c **** /**
  34:Src/arm_sin_f32.c ****  * @ingroup groupFastMath
  35:Src/arm_sin_f32.c ****  */
  36:Src/arm_sin_f32.c **** 
  37:Src/arm_sin_f32.c **** /**
  38:Src/arm_sin_f32.c ****  * @defgroup sin Sine
  39:Src/arm_sin_f32.c ****  *
  40:Src/arm_sin_f32.c ****  * Computes the trigonometric sine function using a combination of table lookup
  41:Src/arm_sin_f32.c ****  * and linear interpolation.  There are separate functions for
  42:Src/arm_sin_f32.c ****  * Q15, Q31, and floating-point data types.
  43:Src/arm_sin_f32.c ****  * The input to the floating-point version is in radians and in the range [0 2*pi) while the
  44:Src/arm_sin_f32.c ****  * fixed-point Q15 and Q31 have a scaled input with the range
  45:Src/arm_sin_f32.c ****  * [0 +0.9999] mapping to [0 2*pi).  The fixed-point range is chosen so that a
  46:Src/arm_sin_f32.c ****  * value of 2*pi wraps around to 0.
  47:Src/arm_sin_f32.c ****  *
  48:Src/arm_sin_f32.c ****  * The implementation is based on table lookup using 256 values together with linear interpolation.
  49:Src/arm_sin_f32.c ****  * The steps used are:
  50:Src/arm_sin_f32.c ****  *  -# Calculation of the nearest integer table index
  51:Src/arm_sin_f32.c ****  *  -# Compute the fractional portion (fract) of the table index.
  52:Src/arm_sin_f32.c ****  *  -# The final result equals <code>(1.0f-fract)*a + fract*b;</code>
  53:Src/arm_sin_f32.c ****  *
  54:Src/arm_sin_f32.c ****  * where
  55:Src/arm_sin_f32.c ****  * <pre>
  56:Src/arm_sin_f32.c ****  *    b=Table[index+0];
  57:Src/arm_sin_f32.c ****  *    c=Table[index+1];
  58:Src/arm_sin_f32.c ****  * </pre>
  59:Src/arm_sin_f32.c ****  */
  60:Src/arm_sin_f32.c **** 
  61:Src/arm_sin_f32.c **** /**
  62:Src/arm_sin_f32.c ****  * @addtogroup sin
  63:Src/arm_sin_f32.c ****  * @{
  64:Src/arm_sin_f32.c ****  */
  65:Src/arm_sin_f32.c **** 
  66:Src/arm_sin_f32.c **** /**
  67:Src/arm_sin_f32.c ****  * @brief  Fast approximation to the trigonometric sine function for floating-point data.
  68:Src/arm_sin_f32.c ****  * @param[in] x input value in radians.
  69:Src/arm_sin_f32.c ****  * @return  sin(x).
  70:Src/arm_sin_f32.c ****  */
  71:Src/arm_sin_f32.c **** 
  72:Src/arm_sin_f32.c **** float32_t arm_sin_f32(
  73:Src/arm_sin_f32.c ****   float32_t x)
  74:Src/arm_sin_f32.c **** {
  30              		.loc 1 74 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  75:Src/arm_sin_f32.c ****   float32_t sinVal, fract, in;                           /* Temporary variables for input, output *
  35              		.loc 1 75 3 view .LVU1
  76:Src/arm_sin_f32.c ****   uint16_t index;                                        /* Index variable */
  36              		.loc 1 76 3 view .LVU2
  77:Src/arm_sin_f32.c ****   float32_t a, b;                                        /* Two nearest output values */
  37              		.loc 1 77 3 view .LVU3
  78:Src/arm_sin_f32.c ****   int32_t n;
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccTHCPjI.s 			page 3


  38              		.loc 1 78 3 view .LVU4
  79:Src/arm_sin_f32.c ****   float32_t findex;
  39              		.loc 1 79 3 view .LVU5
  80:Src/arm_sin_f32.c **** 
  81:Src/arm_sin_f32.c ****   /* Special case for small negative inputs */
  82:Src/arm_sin_f32.c ****   if ((x < 0.0f) && (x >= -1.9e-7f)) {
  40              		.loc 1 82 3 view .LVU6
  41              		.loc 1 82 6 is_stmt 0 view .LVU7
  42 0000 B5EEC00A 		vcmpe.f32	s0, #0
  43 0004 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  44 0008 33D4     		bmi	.L10
  45              	.L2:
  83:Src/arm_sin_f32.c ****      return x;
  84:Src/arm_sin_f32.c ****   }
  85:Src/arm_sin_f32.c **** 
  86:Src/arm_sin_f32.c ****   /* input x is in radians */
  87:Src/arm_sin_f32.c ****   /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  88:Src/arm_sin_f32.c ****   in = x * 0.159154943092f;
  46              		.loc 1 88 3 is_stmt 1 view .LVU8
  47              		.loc 1 88 6 is_stmt 0 view .LVU9
  48 000a DFED217A 		vldr.32	s15, .L12
  49 000e 60EE277A 		vmul.f32	s15, s0, s15
  50              	.LVL1:
  89:Src/arm_sin_f32.c **** 
  90:Src/arm_sin_f32.c ****   /* Calculation of floor value of input */
  91:Src/arm_sin_f32.c ****   n = (int32_t) in;
  51              		.loc 1 91 3 is_stmt 1 view .LVU10
  52              		.loc 1 91 5 is_stmt 0 view .LVU11
  53 0012 BDEEE77A 		vcvt.s32.f32	s14, s15
  54              	.LVL2:
  92:Src/arm_sin_f32.c **** 
  93:Src/arm_sin_f32.c ****   /* Make negative values towards -infinity */
  94:Src/arm_sin_f32.c ****   if (x < 0.0f)
  55              		.loc 1 94 3 is_stmt 1 view .LVU12
  56              		.loc 1 94 6 is_stmt 0 view .LVU13
  57 0016 B5EEC00A 		vcmpe.f32	s0, #0
  58 001a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  59 001e 30D4     		bmi	.L11
  60              	.L5:
  95:Src/arm_sin_f32.c ****   {
  96:Src/arm_sin_f32.c ****     n--;
  97:Src/arm_sin_f32.c ****   }
  98:Src/arm_sin_f32.c **** 
  99:Src/arm_sin_f32.c ****   /* Map input value to [0 1] */
 100:Src/arm_sin_f32.c ****   in = in - (float32_t) n;
  61              		.loc 1 100 3 is_stmt 1 view .LVU14
  62              		.loc 1 100 13 is_stmt 0 view .LVU15
  63 0020 B8EEC77A 		vcvt.f32.s32	s14, s14
  64              	.LVL3:
  65              		.loc 1 100 6 view .LVU16
  66 0024 77EEC77A 		vsub.f32	s15, s15, s14
  67              	.LVL4:
 101:Src/arm_sin_f32.c **** 
 102:Src/arm_sin_f32.c ****   /* Calculation of index of the table */
 103:Src/arm_sin_f32.c ****   findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
  68              		.loc 1 103 3 is_stmt 1 view .LVU17
  69              		.loc 1 103 10 is_stmt 0 view .LVU18
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccTHCPjI.s 			page 4


  70 0028 9FED1A0A 		vldr.32	s0, .L12+4
  71              	.LVL5:
  72              		.loc 1 103 10 view .LVU19
  73 002c 67EE807A 		vmul.f32	s15, s15, s0
  74              	.LVL6:
 104:Src/arm_sin_f32.c **** 
 105:Src/arm_sin_f32.c ****   index = ((uint16_t)findex) & 0x1ff;
  75              		.loc 1 105 3 is_stmt 1 view .LVU20
  76              		.loc 1 105 12 is_stmt 0 view .LVU21
  77 0030 BCEEE77A 		vcvt.u32.f32	s14, s15
  78              	.LVL7:
  79              		.loc 1 105 12 view .LVU22
  80 0034 17EE103A 		vmov	r3, s14	@ int
  81              		.loc 1 105 9 view .LVU23
  82 0038 C3F30803 		ubfx	r3, r3, #0, #9
  83              	.LVL8:
 106:Src/arm_sin_f32.c **** 
 107:Src/arm_sin_f32.c ****   /* fractional value calculation */
 108:Src/arm_sin_f32.c ****   fract = findex - (float32_t) index;
  84              		.loc 1 108 3 is_stmt 1 view .LVU24
  85              		.loc 1 108 20 is_stmt 0 view .LVU25
  86 003c 07EE103A 		vmov	s14, r3	@ int
  87 0040 B8EE470A 		vcvt.f32.u32	s0, s14
  88              		.loc 1 108 9 view .LVU26
  89 0044 77EEC07A 		vsub.f32	s15, s15, s0
  90              	.LVL9:
 109:Src/arm_sin_f32.c **** 
 110:Src/arm_sin_f32.c ****   /* Read two nearest values of input value from the sin table */
 111:Src/arm_sin_f32.c ****   a = sinTable_f32[index];
  91              		.loc 1 111 3 is_stmt 1 view .LVU27
  92              		.loc 1 111 5 is_stmt 0 view .LVU28
  93 0048 134A     		ldr	r2, .L12+8
  94 004a 02EB8301 		add	r1, r2, r3, lsl #2
  95 004e D1ED006A 		vldr.32	s13, [r1]
  96              	.LVL10:
 112:Src/arm_sin_f32.c ****   b = sinTable_f32[index+1];
  97              		.loc 1 112 3 is_stmt 1 view .LVU29
  98              		.loc 1 112 25 is_stmt 0 view .LVU30
  99 0052 0133     		adds	r3, r3, #1
 100              	.LVL11:
 101              		.loc 1 112 5 view .LVU31
 102 0054 02EB8303 		add	r3, r2, r3, lsl #2
 103 0058 93ED007A 		vldr.32	s14, [r3]
 104              	.LVL12:
 113:Src/arm_sin_f32.c **** 
 114:Src/arm_sin_f32.c ****   /* Linear interpolation process */
 115:Src/arm_sin_f32.c ****   sinVal = (1.0f-fract)*a + fract*b;
 105              		.loc 1 115 3 is_stmt 1 view .LVU32
 106              		.loc 1 115 17 is_stmt 0 view .LVU33
 107 005c B7EE000A 		vmov.f32	s0, #1.0e+0
 108 0060 30EE670A 		vsub.f32	s0, s0, s15
 109              		.loc 1 115 24 view .LVU34
 110 0064 20EE260A 		vmul.f32	s0, s0, s13
 111              		.loc 1 115 34 view .LVU35
 112 0068 67EE877A 		vmul.f32	s15, s15, s14
 113              	.LVL13:
 114              		.loc 1 115 10 view .LVU36
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccTHCPjI.s 			page 5


 115 006c 30EE270A 		vadd.f32	s0, s0, s15
 116              	.LVL14:
 116:Src/arm_sin_f32.c **** 
 117:Src/arm_sin_f32.c ****   /* Return the output value */
 118:Src/arm_sin_f32.c ****   return (sinVal);
 117              		.loc 1 118 3 is_stmt 1 view .LVU37
 118              	.L1:
 119:Src/arm_sin_f32.c **** }
 119              		.loc 1 119 1 is_stmt 0 view .LVU38
 120 0070 7047     		bx	lr
 121              	.LVL15:
 122              	.L10:
  82:Src/arm_sin_f32.c ****      return x;
 123              		.loc 1 82 18 discriminator 1 view .LVU39
 124 0072 DFED0A7A 		vldr.32	s15, .L12+12
 125 0076 B4EEE70A 		vcmpe.f32	s0, s15
 126 007a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 127 007e C4DB     		blt	.L2
 128 0080 F6E7     		b	.L1
 129              	.LVL16:
 130              	.L11:
  96:Src/arm_sin_f32.c ****   }
 131              		.loc 1 96 5 is_stmt 1 view .LVU40
  96:Src/arm_sin_f32.c ****   }
 132              		.loc 1 96 6 is_stmt 0 view .LVU41
 133 0082 17EE103A 		vmov	r3, s14	@ int
 134 0086 013B     		subs	r3, r3, #1
 135 0088 07EE103A 		vmov	s14, r3	@ int
 136              	.LVL17:
  96:Src/arm_sin_f32.c ****   }
 137              		.loc 1 96 6 view .LVU42
 138 008c C8E7     		b	.L5
 139              	.L13:
 140 008e 00BF     		.align	2
 141              	.L12:
 142 0090 83F9223E 		.word	1042479491
 143 0094 00000044 		.word	1140850688
 144 0098 00000000 		.word	sinTable_f32
 145 009c CD024CB4 		.word	-1270086963
 146              		.cfi_endproc
 147              	.LFE135:
 149              		.text
 150              	.Letext0:
 151              		.file 2 "c:\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 152              		.file 3 "c:\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 153              		.file 4 "c:\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 154              		.file 5 "c:\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 155              		.file 6 "c:\\arm_gcc\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stddef.h"
 156              		.file 7 "c:\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 157              		.file 8 "c:\\arm_gcc\\arm-none-eabi\\include\\math.h"
 158              		.file 9 "Drivers/CMSIS/DSP/Include/arm_math.h"
 159              		.file 10 "Src/arm_common_tables.h"
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccTHCPjI.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 arm_sin_f32.c
C:\Users\ncer\AppData\Local\Temp\ccTHCPjI.s:18     .text.arm_sin_f32:00000000 $t
C:\Users\ncer\AppData\Local\Temp\ccTHCPjI.s:26     .text.arm_sin_f32:00000000 arm_sin_f32
C:\Users\ncer\AppData\Local\Temp\ccTHCPjI.s:142    .text.arm_sin_f32:00000090 $d

UNDEFINED SYMBOLS
sinTable_f32
