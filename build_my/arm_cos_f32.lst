ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccnjQ4fh.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"arm_cos_f32.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.arm_cos_f32,"ax",%progbits
  18              		.align	1
  19              		.global	arm_cos_f32
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	arm_cos_f32:
  27              	.LVL0:
  28              	.LFB135:
  29              		.file 1 "Src/arm_cos_f32.c"
   1:Src/arm_cos_f32.c **** /* ----------------------------------------------------------------------
   2:Src/arm_cos_f32.c ****  * Project:      CMSIS DSP Library
   3:Src/arm_cos_f32.c ****  * Title:        arm_cos_f32.c
   4:Src/arm_cos_f32.c ****  * Description:  Fast cosine calculation for floating-point values
   5:Src/arm_cos_f32.c ****  *
   6:Src/arm_cos_f32.c ****  * $Date:        27. January 2017
   7:Src/arm_cos_f32.c ****  * $Revision:    V.1.5.1
   8:Src/arm_cos_f32.c ****  *
   9:Src/arm_cos_f32.c ****  * Target Processor: Cortex-M cores
  10:Src/arm_cos_f32.c ****  * -------------------------------------------------------------------- */
  11:Src/arm_cos_f32.c **** /*
  12:Src/arm_cos_f32.c ****  * Copyright (C) 2010-2017 ARM Limited or its affiliates. All rights reserved.
  13:Src/arm_cos_f32.c ****  *
  14:Src/arm_cos_f32.c ****  * SPDX-License-Identifier: Apache-2.0
  15:Src/arm_cos_f32.c ****  *
  16:Src/arm_cos_f32.c ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  17:Src/arm_cos_f32.c ****  * not use this file except in compliance with the License.
  18:Src/arm_cos_f32.c ****  * You may obtain a copy of the License at
  19:Src/arm_cos_f32.c ****  *
  20:Src/arm_cos_f32.c ****  * www.apache.org/licenses/LICENSE-2.0
  21:Src/arm_cos_f32.c ****  *
  22:Src/arm_cos_f32.c ****  * Unless required by applicable law or agreed to in writing, software
  23:Src/arm_cos_f32.c ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  24:Src/arm_cos_f32.c ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  25:Src/arm_cos_f32.c ****  * See the License for the specific language governing permissions and
  26:Src/arm_cos_f32.c ****  * limitations under the License.
  27:Src/arm_cos_f32.c ****  */
  28:Src/arm_cos_f32.c **** 
  29:Src/arm_cos_f32.c **** #include "arm_math.h"
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccnjQ4fh.s 			page 2


  30:Src/arm_cos_f32.c **** #include "arm_common_tables.h"
  31:Src/arm_cos_f32.c **** /**
  32:Src/arm_cos_f32.c ****  * @ingroup groupFastMath
  33:Src/arm_cos_f32.c ****  */
  34:Src/arm_cos_f32.c **** 
  35:Src/arm_cos_f32.c **** /**
  36:Src/arm_cos_f32.c ****  * @defgroup cos Cosine
  37:Src/arm_cos_f32.c ****  *
  38:Src/arm_cos_f32.c ****  * Computes the trigonometric cosine function using a combination of table lookup
  39:Src/arm_cos_f32.c ****  * and linear interpolation.  There are separate functions for
  40:Src/arm_cos_f32.c ****  * Q15, Q31, and floating-point data types.
  41:Src/arm_cos_f32.c ****  * The input to the floating-point version is in radians and in the range [0 2*pi) while the
  42:Src/arm_cos_f32.c ****  * fixed-point Q15 and Q31 have a scaled input with the range
  43:Src/arm_cos_f32.c ****  * [0 +0.9999] mapping to [0 2*pi).  The fixed-point range is chosen so that a
  44:Src/arm_cos_f32.c ****  * value of 2*pi wraps around to 0.
  45:Src/arm_cos_f32.c ****  *
  46:Src/arm_cos_f32.c ****  * The implementation is based on table lookup using 256 values together with linear interpolation.
  47:Src/arm_cos_f32.c ****  * The steps used are:
  48:Src/arm_cos_f32.c ****  *  -# Calculation of the nearest integer table index
  49:Src/arm_cos_f32.c ****  *  -# Compute the fractional portion (fract) of the table index.
  50:Src/arm_cos_f32.c ****  *  -# The final result equals <code>(1.0f-fract)*a + fract*b;</code>
  51:Src/arm_cos_f32.c ****  *
  52:Src/arm_cos_f32.c ****  * where
  53:Src/arm_cos_f32.c ****  * <pre>
  54:Src/arm_cos_f32.c ****  *    b=Table[index+0];
  55:Src/arm_cos_f32.c ****  *    c=Table[index+1];
  56:Src/arm_cos_f32.c ****  * </pre>
  57:Src/arm_cos_f32.c ****  */
  58:Src/arm_cos_f32.c **** 
  59:Src/arm_cos_f32.c ****  /**
  60:Src/arm_cos_f32.c ****  * @addtogroup cos
  61:Src/arm_cos_f32.c ****  * @{
  62:Src/arm_cos_f32.c ****  */
  63:Src/arm_cos_f32.c **** 
  64:Src/arm_cos_f32.c **** /**
  65:Src/arm_cos_f32.c ****  * @brief  Fast approximation to the trigonometric cosine function for floating-point data.
  66:Src/arm_cos_f32.c ****  * @param[in] x input value in radians.
  67:Src/arm_cos_f32.c ****  * @return cos(x).
  68:Src/arm_cos_f32.c ****  */
  69:Src/arm_cos_f32.c **** 
  70:Src/arm_cos_f32.c **** float32_t arm_cos_f32(
  71:Src/arm_cos_f32.c ****   float32_t x)
  72:Src/arm_cos_f32.c **** {
  30              		.loc 1 72 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  73:Src/arm_cos_f32.c ****   float32_t cosVal, fract, in;                   /* Temporary variables for input, output */
  35              		.loc 1 73 3 view .LVU1
  74:Src/arm_cos_f32.c ****   uint16_t index;                                /* Index variable */
  36              		.loc 1 74 3 view .LVU2
  75:Src/arm_cos_f32.c ****   float32_t a, b;                                /* Two nearest output values */
  37              		.loc 1 75 3 view .LVU3
  76:Src/arm_cos_f32.c ****   int32_t n;
  38              		.loc 1 76 3 view .LVU4
  77:Src/arm_cos_f32.c ****   float32_t findex;
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccnjQ4fh.s 			page 3


  39              		.loc 1 77 3 view .LVU5
  78:Src/arm_cos_f32.c **** 
  79:Src/arm_cos_f32.c ****   /* input x is in radians */
  80:Src/arm_cos_f32.c ****   /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read s
  81:Src/arm_cos_f32.c ****   in = x * 0.159154943092f + 0.25f;
  40              		.loc 1 81 3 view .LVU6
  41              		.loc 1 81 10 is_stmt 0 view .LVU7
  42 0000 DFED1E7A 		vldr.32	s15, .L6
  43 0004 20EE270A 		vmul.f32	s0, s0, s15
  44              	.LVL1:
  45              		.loc 1 81 6 view .LVU8
  46 0008 F5EE007A 		vmov.f32	s15, #2.5e-1
  47 000c 30EE270A 		vadd.f32	s0, s0, s15
  48              	.LVL2:
  82:Src/arm_cos_f32.c **** 
  83:Src/arm_cos_f32.c ****   /* Calculation of floor value of input */
  84:Src/arm_cos_f32.c ****   n = (int32_t) in;
  49              		.loc 1 84 3 is_stmt 1 view .LVU9
  50              		.loc 1 84 5 is_stmt 0 view .LVU10
  51 0010 FDEEC07A 		vcvt.s32.f32	s15, s0
  52              	.LVL3:
  85:Src/arm_cos_f32.c **** 
  86:Src/arm_cos_f32.c ****   /* Make negative values towards -infinity */
  87:Src/arm_cos_f32.c ****   if (in < 0.0f)
  53              		.loc 1 87 3 is_stmt 1 view .LVU11
  54              		.loc 1 87 6 is_stmt 0 view .LVU12
  55 0014 B5EEC00A 		vcmpe.f32	s0, #0
  56 0018 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
  57 001c 28D4     		bmi	.L5
  58              	.L2:
  88:Src/arm_cos_f32.c ****   {
  89:Src/arm_cos_f32.c ****     n--;
  90:Src/arm_cos_f32.c ****   }
  91:Src/arm_cos_f32.c **** 
  92:Src/arm_cos_f32.c ****   /* Map input value to [0 1] */
  93:Src/arm_cos_f32.c ****   in = in - (float32_t) n;
  59              		.loc 1 93 3 is_stmt 1 view .LVU13
  60              		.loc 1 93 13 is_stmt 0 view .LVU14
  61 001e F8EEE77A 		vcvt.f32.s32	s15, s15
  62              	.LVL4:
  63              		.loc 1 93 6 view .LVU15
  64 0022 70EE677A 		vsub.f32	s15, s0, s15
  65              	.LVL5:
  94:Src/arm_cos_f32.c **** 
  95:Src/arm_cos_f32.c ****   /* Calculation of index of the table */
  96:Src/arm_cos_f32.c ****   findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
  66              		.loc 1 96 3 is_stmt 1 view .LVU16
  67              		.loc 1 96 10 is_stmt 0 view .LVU17
  68 0026 9FED160A 		vldr.32	s0, .L6+4
  69 002a 67EE807A 		vmul.f32	s15, s15, s0
  70              	.LVL6:
  97:Src/arm_cos_f32.c ****   index = ((uint16_t)findex) & 0x1ff;
  71              		.loc 1 97 3 is_stmt 1 view .LVU18
  72              		.loc 1 97 12 is_stmt 0 view .LVU19
  73 002e BCEEE77A 		vcvt.u32.f32	s14, s15
  74 0032 17EE103A 		vmov	r3, s14	@ int
  75              		.loc 1 97 9 view .LVU20
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccnjQ4fh.s 			page 4


  76 0036 C3F30803 		ubfx	r3, r3, #0, #9
  77              	.LVL7:
  98:Src/arm_cos_f32.c **** 
  99:Src/arm_cos_f32.c ****   /* fractional value calculation */
 100:Src/arm_cos_f32.c ****   fract = findex - (float32_t) index;
  78              		.loc 1 100 3 is_stmt 1 view .LVU21
  79              		.loc 1 100 20 is_stmt 0 view .LVU22
  80 003a 07EE103A 		vmov	s14, r3	@ int
  81 003e B8EE470A 		vcvt.f32.u32	s0, s14
  82              		.loc 1 100 9 view .LVU23
  83 0042 77EEC07A 		vsub.f32	s15, s15, s0
  84              	.LVL8:
 101:Src/arm_cos_f32.c **** 
 102:Src/arm_cos_f32.c ****   /* Read two nearest values of input value from the cos table */
 103:Src/arm_cos_f32.c ****   a = sinTable_f32[index];
  85              		.loc 1 103 3 is_stmt 1 view .LVU24
  86              		.loc 1 103 5 is_stmt 0 view .LVU25
  87 0046 0F4A     		ldr	r2, .L6+8
  88 0048 02EB8301 		add	r1, r2, r3, lsl #2
  89 004c D1ED006A 		vldr.32	s13, [r1]
  90              	.LVL9:
 104:Src/arm_cos_f32.c ****   b = sinTable_f32[index+1];
  91              		.loc 1 104 3 is_stmt 1 view .LVU26
  92              		.loc 1 104 25 is_stmt 0 view .LVU27
  93 0050 0133     		adds	r3, r3, #1
  94              	.LVL10:
  95              		.loc 1 104 5 view .LVU28
  96 0052 02EB8303 		add	r3, r2, r3, lsl #2
  97 0056 93ED007A 		vldr.32	s14, [r3]
  98              	.LVL11:
 105:Src/arm_cos_f32.c **** 
 106:Src/arm_cos_f32.c ****   /* Linear interpolation process */
 107:Src/arm_cos_f32.c ****   cosVal = (1.0f-fract)*a + fract*b;
  99              		.loc 1 107 3 is_stmt 1 view .LVU29
 100              		.loc 1 107 17 is_stmt 0 view .LVU30
 101 005a B7EE000A 		vmov.f32	s0, #1.0e+0
 102 005e 30EE670A 		vsub.f32	s0, s0, s15
 103              		.loc 1 107 24 view .LVU31
 104 0062 20EE260A 		vmul.f32	s0, s0, s13
 105              		.loc 1 107 34 view .LVU32
 106 0066 67EE877A 		vmul.f32	s15, s15, s14
 107              	.LVL12:
 108:Src/arm_cos_f32.c **** 
 109:Src/arm_cos_f32.c ****   /* Return the output value */
 110:Src/arm_cos_f32.c ****   return (cosVal);
 108              		.loc 1 110 3 is_stmt 1 view .LVU33
 111:Src/arm_cos_f32.c **** }
 109              		.loc 1 111 1 is_stmt 0 view .LVU34
 110 006a 30EE270A 		vadd.f32	s0, s0, s15
 111              	.LVL13:
 112              		.loc 1 111 1 view .LVU35
 113 006e 7047     		bx	lr
 114              	.LVL14:
 115              	.L5:
  89:Src/arm_cos_f32.c ****   }
 116              		.loc 1 89 5 is_stmt 1 view .LVU36
  89:Src/arm_cos_f32.c ****   }
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccnjQ4fh.s 			page 5


 117              		.loc 1 89 6 is_stmt 0 view .LVU37
 118 0070 17EE903A 		vmov	r3, s15	@ int
 119 0074 013B     		subs	r3, r3, #1
 120 0076 07EE903A 		vmov	s15, r3	@ int
 121              	.LVL15:
  89:Src/arm_cos_f32.c ****   }
 122              		.loc 1 89 6 view .LVU38
 123 007a D0E7     		b	.L2
 124              	.L7:
 125              		.align	2
 126              	.L6:
 127 007c 83F9223E 		.word	1042479491
 128 0080 00000044 		.word	1140850688
 129 0084 00000000 		.word	sinTable_f32
 130              		.cfi_endproc
 131              	.LFE135:
 133              		.text
 134              	.Letext0:
 135              		.file 2 "c:\\arm_gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 136              		.file 3 "c:\\arm_gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 137              		.file 4 "c:\\arm_gcc\\arm-none-eabi\\include\\sys\\lock.h"
 138              		.file 5 "c:\\arm_gcc\\arm-none-eabi\\include\\sys\\_types.h"
 139              		.file 6 "c:\\arm_gcc\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stddef.h"
 140              		.file 7 "c:\\arm_gcc\\arm-none-eabi\\include\\sys\\reent.h"
 141              		.file 8 "c:\\arm_gcc\\arm-none-eabi\\include\\math.h"
 142              		.file 9 "Drivers/CMSIS/DSP/Include/arm_math.h"
 143              		.file 10 "Src/arm_common_tables.h"
ARM GAS  C:\Users\ncer\AppData\Local\Temp\ccnjQ4fh.s 			page 6


DEFINED SYMBOLS
                            *ABS*:00000000 arm_cos_f32.c
C:\Users\ncer\AppData\Local\Temp\ccnjQ4fh.s:18     .text.arm_cos_f32:00000000 $t
C:\Users\ncer\AppData\Local\Temp\ccnjQ4fh.s:26     .text.arm_cos_f32:00000000 arm_cos_f32
C:\Users\ncer\AppData\Local\Temp\ccnjQ4fh.s:127    .text.arm_cos_f32:0000007c $d

UNDEFINED SYMBOLS
sinTable_f32
